<section class="presentation">
    <div class="presentation-presenter">
        <div class="presentation-presenter__avatar-container">
          <img src="/assets/images/people/presenters/julie_moronuki.jpg"
               class="presentation-presenter__avatar"
               alt="Julie Moronuki's Headshot" />
        </div>
        <h4 class="presentation-presenter__name">Julie Moronuki</h4>
        <p class="presentation-presenter__link">
          <a href="https://twitter.com/joyofhaskell">@joyofhaskell</a>
        </p>
        <p class="presentation-presenter__link">
          <a href="https://joyofhaskell.com">The Joy Of Haskell</a>
        </p>
        <br/>

    </div>

    <div class="presentation__details">
      <h3 class="presentation__title">
        Thinking In Types
      </h3>
      <div class="presentation__description">
        <p>
        In this one-day workshop, we'll explore the distinguishing features
        of Haskell's type system. Haskell has several varieties of types:
        sum types, product types, newtypes, as well as functions over types
        (aka "HKTs" or "type constructors"). There is no "any" type, no
        "null" value, no "subtype" relationships.
        </p>

        <p>
        This workshop is intended for people who do not have much experience
        with the Haskell language, and the goal will be to give a practical
        understanding of some of Haskell's most important features and how
        to start thinking in types. Please come prepared to write code. It
        is recommended that you have GHC installed before the workshop begins.
        </p>
      </div>

      <div class="presentation__bio">
        <p><strong>About Julie</strong></p>
        <p>
          Julie Moronuki is an author of books about Haskell and co-founder
          of Type Classes, a Haskell education and consulting company.
          Before learning Haskell, Julie had been a linguist, librarian, and
          teacher. She lives in Montana.
        </p>
      </div>
    </div>
</section>
