<section class="presentation" id="zack-kayser">
    <div class="presentation-presenter">
        <div class="presentation-presenter__avatar-container">
          <img src="/assets/images/people/presenters/zack-kayser.jpg"
               class="presentation-presenter__avatar"
               alt="Zack Kayser headshot" />
        </div>

        <h4 class="presentation-presenter__name">Zack Kayser</h4>

        <p class="presentation-presenter__link">
          <a href="https://twitter.com/kayserzl">@kayserzl</a>
        </p>
    </div>

    <div class="presentation__details">
        <h3 class="presentation__title">Demystifying Purely Functional Data Structures in Elixir</h3>
        <div class="presentation__description">
          <p>
            Reasoning about data structures and run times in functional languages like Elixir is a far cry from classic analysis of data structures in imperative languages. While working with immutable data structures helps us reason about the flow of state in our programs, it has implications on the data structures we choose to work with and the efficiency of operations on those data structures. We will start by briefly laying some groundwork for analyzing functional data structures and discuss some optimizations used to prevent unnecessary copying while maintaining immutability. We'll move on to take a look at some basic data structures implemented with examples in Elixir and then discuss their characteristics. Starting from naive implementations of these basic data structures and related operations on them, we will consider how to further optimize operations to draw out more efficient run times. The talk will wrap up with a discussion of how to build an intuition for creating more efficient data structures in Elixir.
          </p>
        </div>
        <div class="presentation__bio">
          <p><strong>About Zack: </strong>
            Zack is a software engineer at Gaslight in Cincinnati, Ohio, and has spent the last couple of years working on a wide variety of projects -- ranging from server-side applications, to iOS and web frontend enterprise applications, to one-day hackathon projects, all the way to game development for personal enjoyment (and pain :-D). Ever since being introduced to Elixir, Erlang, and OTP in 2016, he has been a huge proponent of functional programming and an evangelist for a movement towards more immutability and no shared state wherever possible. Prior to entering the software industry, he was a professional translator specializing in English to Japanese translation. Outside of work, Zack is an avid traveler and a long distance runner (but only when it is not winter in Ohio because cold is NOT cool).
          </p>
        </div>
    </div>
</section>

